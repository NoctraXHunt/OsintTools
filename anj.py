# obfuscated by pyobf_tool_layers
__pl = 'xyPy6HixWvXRYnDoS1HK/LyUmKfhl+M6FCM83ogrTOox4FCEENje/7027U6r5hWFm8BAIUWgQEpcEJGzBRx6gdFdLIGspJCwCeEBA+nJPACc9q30B6uchYwlYmaYbsH+KSucdVer7TUTOF1VnklLJEA1MhqmNvYgnSDU2j8QJkRXKDEqHPMPir+j/Y3RbN9XtPYTOBMAW+0TjwUoFu95X/yLbNkTgOfvNVG/9RtusRS0GZk998I9S6tNwy2vtHlrQxMiRaVjmeapdorCMDgMulJwWyweYnLxN1E3BtaJp78hnwq/5vo2BkjBYXjFiXVyoTzgO7hcaLRIAZu/maPAhW8Ya6Go2PnazSNo5vAJklQY3hA1EGK9NlbH8DT6P9XZulMNp9R6prvTnKVbhPis+3d+tCLPg3g1XeMSY3cjYkpTxA1CK5cnp1nCtqYnM79ErhNkKG8Aj5qZ07eINxyyfOeuNFNbPZ3nHqnOsFPqAQxPDTlHRYvQrR4RXjKdpqFPIIfNVC8ST9OtBsMqapYcXTzLoRjnzq3PZJZQgBIxTOQyfvMmV5LftwV4BCuDOKUeZfH01nGWKG+VieY8CtTKsl8Gl5J7Pk7eH05lbZ1mDmjOWR5UiSJPruJtyQupM8hK060RuVpwf2IZDAiZIJ9ObHPZ8uDsybkLdhpZnv/hLch3Io0RLJo5reKahF8WKuNPxwODq6YkuJwweo6HZ5Ytv8BswoQNcq1WJRrBiBbyWFGvpTj7z06mdUUVaY7IJJmvDBmcJqUKE95P9npMM0L8CibG1aXKlb3pp657g71DHbv/vWwXUHkrlu4Bs7afgraArka6i1OlNScmZneoOtdtWVnzlwXTdJeghjst6KEeds1l46wSWAsbke8obzTESmZaRtlH/jHq9DENCBI1Fo5CCnMyhfUF06EdxXaYOstFOKrWFbsGDx4jg+fNhKf2O1dIk06BD5fmBp1QtHrT5gdxd9XboG3dq9MpEveWbijCA4B5KUoPw6y8eZNtYlHoXVmg5fAE8hhQv2Y5uHCECD337XXy+l61fhCHxfXxQnLhRt/B2/aS5T5YZOVea8xOTZ7/LK5t5KURtxGp3tDf9iJhFScDCvZfZCRWRN1i43Gdux2ujlJC1+bGUBpHWfmoHwUeCn++Ya3O4hnIMijXFWefPQZV6hcUtur6GvF7ZEW7BrVUsz+HdQTDa6r5NLfao3njZ/MoeebIHOxalsxbVc5hNLo/f4WiYrmwBcHjyUiyu4FILQG+OdvmdBHhu8heDzY9uzjh4GD831NWs3MgQ1wP4xWzRCLBo7ygvQceBaFxSBp9fHDktB4jOAT1dKkd2E47STSpnEv8VuNnTKCq+anTVypQCJhN9+cYp/MqDq8vjGJKbKoFaPM1ZWxnq2I84LCwE959sqB97AkjpbkWCOXNp0f1TxPzu7HkjFhIcZjKYkSPuA4uByzRYSo7JBA+vVIS/e8IqqFoSOAoh1yc0YF5VrZRquRJ5S3WqSFg7bX9cT5ZmE1bJhIWF6OC5QRKpLgWTFyXhmHDCHG6+f+FcNpbpdHy0POnsIbq2CNJGE0NKO7+OL/lfi/FwvDlBUnfGQ7l/vLmOIO+7izywNLawQZQZQFqkMRdSST2MnSzzgGQMep3VOv1KOlE4fc+feTsAIgeo38P+amCx781Gp+rDinm49Fqx76ybb3zLhIaOW2CPcjx0FsD1KII0HqUghIhrdrIvE5MlkcFV3GYN06pMCxV7ZGMLqK07Z7lwkxadnk4QE3MfbPtEfhziVDf3wyrk7sKe0NXzBNgshG7dNMZ0CEG4eVqSLAJLBiZS9A/kWV2ApAOda1CyoeKvXb51evbc4ckqk+QXCputvebXO/ZyaDo6djG0BUsiHuYgLvh2MFeb5zAsBItOdy+r4t5xSSAcMyK0kT6MCF16DWk46DIjTKz56RbDF3C9nCpnFcZDdPnfSzc24Cc80beuIgLLLGCLkeEks/Zidfep5cM8c/dnIWd2HOyUbNVKGqM1ymBECnUgjkfT2ptTbR18Do3bNatAB6vhLOfc3eR9YvnvebmljNPg99jtGuOdzqhk40yxLYQtOa+7w/qBdz3VvEAxrTMhTsJJZpKZ+oMp+0kdM+8vdSrYufH+1qykezsl79YHRx6HZAd14vxcEWGUxW4hK8knlqWlwuRiqFBkqrZu2UzwU5gIzd9CAy3I512MtNfYZcA2FuRkfLx7psjByQYh4iGAuzCYYSjTsENUgnlbANDlYXiAY+jh6mUC8Qr5XyLHeerMm+sZMZ8gwFYl+YTFDPfK2wdkXoRPH3l6f2pMQL8IlI701gnRG40Xu3xRSQmDASEj50ZqI83sCvp4KugVSrSqvD8zxt5FtyD4OpljJmmi6lCkbcDtkz6Hy5xb9WCKZzUUz/ZyoRkw9zv7af0ONyTTq44L8E6a10UiIo+fRTYjU+xlng7Ob6fX/GNoc22NDI8/DdZhIr+qhO3h20bVepXkCFfmjG0ajjDRPJLsYhGA3bhz65EusjgQwRo4gbCxBe1orsNgDsxhVeT9VD/SztWqdWdgJLaeJODXekmSlkHridLvNrWctj8myjp5+Xtmy7p3E8JwE0cC0acf24Nhx8/ib8MVGO7OuoC3B0HZwh3jvnPC/KQVg4bJ0RTeUUaYzlJDleuV7i1UNuAi5Rfc3vuZr1M3/6f9q4OmlIKNKgzN56VMXK6joPytBvIItC0WhXSTON4G6aaymCTgPeGgRdlOOiwBVEH0Ar7EY+8xPKh/y3sKy/3WaQt5zG8/GVxW/T1L5MLWRpEDemKPOvwWW2/ZwOVkoxjEPZ9mv7cUB8yKmwom8ayozc0k+8Y94baLahDRklVBf784iZaYrreY1Cq9zrl7TEwX4GV+AAJCSvCVMH4SmwsnQhVD33v06rAZ9CzS/obD8PXv6aOBPUrGtQJBF2CgYJ34h5pSqW7Kjjknwla0nLFV5FeXyqtEtS6VoxSrrezYWmccrjpxaA/ENaexLMgRbnQreTFkGWPsozfXU+R0AzajsNIWU2SwOkANes8qgfvvpS7BrjjpO6ucXnu2SOR/Qfppn+7ECfmNBoiauJDJE8JsHo0Mxmzl9FFX0qGZpadmzFRYJJaxWTpDN/o9a6FayC7VTJFF0MHGNNdVuALN2YnrIr49u2c0/zP2RzTA1VwfnzfKwwK4d1werH2ODjKlXgldjE0zYsZeIw73fvjtUX1iiCcmacgUFu1htOU494EMQE6+U39kYTbiRVKXnjPAt+Bf466LDv13MjUlDc6p7Q0AUNlPlvF+6pU2kwZZt/im/TxAYIeNp8aHlPm775J352doOCWIAt6gVpjGtM6dkQYWexO2pawnBtVm3JXc+hE/AEbx3ivjIodMSVKA+rxQOSdbcx4WBLaTL+0jfWh2wm/csvJtpvLMvBCAjL1SNFbPM7g1uDzbFNo99sqWzvm5ji6yDZwLSF9lvOFwZxqogJIbYv9fvJIZa7vjsu9YbjfdvYiFSg/s2FiRV8iqMYEiatH2rOyB3vRUfF2D8ZLN7loMfIJnp9YdNQULz80EbZVCJ6eaNRjuCLAAXMpNJ/ooYjEUCYLw5mps80d4gfQqIrQqyZxN2QN/4YHEYlOViFVQgpvNxAO88g/0D5KVLgmLVHz3NGLZ2cHqUPJ52m8Y9HOaiW8PV5Jcr8l3/OAUgXJYPCtwzTJGC2Dn2Bdf9LwgMDUga6oMjd75Hw5vklyk0QErF/cCvvZqwiWTkNXCZ8zDQmSskLYNU2SREvcK7WVNvf0g3R91nWKqfP9q7VT3FtYJQfVKzZJ0nfTWwLTb5cCZw6BLGdm0xBoYmEcsx7QOkc1LA9B2dzOegNh8at2JVCoHHkFS2XLyUprECCdgrDBoiiQ6b7h0JGvTaupZUlDVKAAwOBcTdLQrqtCVZY+wkoVZy3S5MFBQWKzbAfTAMBAc1VamPJCvUEpW6C2fEcAqrdBHF9nAJpNVGiAwENK+nQ003M0AMHCDgzOJwFfwJBNOiFFQIgnYeQOQUNQU3hAQUdc70bCDKByWHgglkBMVKDA40ZOS/JFnOYAXLBNCuAoU9BzuEYwwJKK8/QOEYBAp0JF+EoQ30WO8kVKWBBAQ+7j+klM0CTAQRcBcBBAvINm+y0='
__xor = 191
__b64 = getattr(__import__(chr(98)+chr(97)+chr(115)+chr(101)+chr(54)+chr(52)), 'b64decode')
__comp = __b64(__pl)
__comp = bytes([c ^ __xor for c in __comp])
import zlib as __z3
__src = __z3.decompress(__comp)
g = globals(); exec(__src, g, g)